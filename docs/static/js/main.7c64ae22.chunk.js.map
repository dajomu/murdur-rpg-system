{"version":3,"sources":["components/Header.tsx","stores/player.ts","dataObjects/LevelMap.ts","components/ComponentWithGameContext.tsx","stores/levels.ts","stores/messages.ts","components/CharacterInfoPanel.tsx","components/CharacterStats.tsx","components/MapPanel.tsx","components/MessagesPanel.tsx","screens/ExploreScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","playerStore","observable","strength","intelligence","wisdom","constitution","charisma","dexterity","LevelMap","size","randomise","levelSections","discoveredSections","markSectionDiscovered","coords","tile","modifier","leftWall","topWall","isSectionDiscovered","randomlyPopulateMap","ycord","xcord","push","getRandomWall","terrain","getRandomTerrain","randomWall","Math","round","random","this","gameContextDefaultValue","levelStore","level1","find","section","action","messageStore","messagePanelScrollRef","React","createRef","addMessage","text","type","messages","scrollMessagesToBottom","messagePanelScrollRefElement","current","scrollTop","scrollHeight","gameContext","ComponentWithGameContext","context","contextType","CharacterInfoPanel","observer","className","sex","race","alignment","level","age","currentHits","maxHits","experience","gold","stats","tabs","name","id","CharacterStats","props","changeTab","activeTab","setState","state","map","tabInfo","onClick","Component","MapPanel","handleKeyDown","event","playerLocation","keyCode","boundingSection","getSectionByCoords","window","addEventListener","removeEventListener","console","log","style","width","height","isPlayerLocation","getSectionDiscovered","wallClasses","sectionClass","key","MessagesPanel","ref","message","ExploreScreen","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7c64ae22.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => <div></div>\n\nexport default Header;","import { observable } from 'mobx';\n\ninterface Stats {\n  strength: number;\n  intelligence: number;\n  wisdom: number;\n  constitution: number;\n  charisma: number;\n  dexterity: number;\n}\n\nexport class PlayerStore {\n  @observable age: number = 20;\n  @observable alignment: string = \"Good\";\n  @observable race: string = \"Elf\";\n  @observable sex: string = \"Female\";\n  @observable level: number = 1;\n  @observable maxHits: number = 50;\n  @observable currentHits: number = 50;\n  @observable experience: number = 1;\n  @observable gold: number = 0;\n  @observable stats: Stats = {\n    strength: 10,\n    intelligence: 10,\n    wisdom: 10,\n    constitution: 10,\n    charisma: 10,\n    dexterity: 10,\n  }\n}\n\nconst playerStore = new PlayerStore();\n\nexport default playerStore;","// import { observable } from 'mobx';\n\ninterface SectionData {\n  coords: [number, number],\n  leftWall: string;\n  topWall: string;\n  terrain: string;\n  modifier?: string;\n}\n\ninterface DiscoveredSection {\n  leftWall: boolean;\n  topWall: boolean;\n  tile: boolean,\n  modifier: boolean\n}\n\nexport default class LevelMap {\n  levelSections: SectionData[] = [];//Map<[number, number], SectionData> = new Map();\n  size: number;\n  discoveredSections: { [key: string]: DiscoveredSection } = {};\n\n  constructor(size = 10, randomise = true) {\n    this.size = size;\n    if (randomise) { this.randomlyPopulateMap() }\n  }\n\n  public markSectionDiscovered = (coords: [number, number]) => {\n    this.discoveredSections[`${coords[0]}-${coords[1]}`] = { tile: true, modifier: true, leftWall: true, topWall: true };\n    if(this.discoveredSections[`${coords[0] + 1}-${coords[1]}`]) {\n      this.discoveredSections[`${coords[0] + 1}-${coords[1]}`].leftWall = true;\n    }\n    if(this.discoveredSections[`${coords[0]}-${coords[1] + 1}`]) {\n      this.discoveredSections[`${coords[0]}-${coords[1] + 1}`].topWall = true;\n    }\n  }\n\n  public isSectionDiscovered = (coords: [number, number]) => {\n    return this.discoveredSections[`${coords[0]}-${coords[1]}`] ? this.discoveredSections[`${coords[0]}-${coords[1]}`].tile : false;\n  }\n\n  private randomlyPopulateMap = () => {\n    for(var ycord = 0; ycord < this.size; ycord++) {\n      for(var xcord = 0; xcord < this.size; xcord++) {\n        this.levelSections.push({coords: [xcord, ycord], leftWall: this.getRandomWall(), topWall: this.getRandomWall(), terrain: this.getRandomTerrain()});\n        this.discoveredSections[`${xcord}-${ycord}`] = { tile: false, modifier: false, leftWall: false, topWall: false };\n      }\n    }\n  }\n\n  private getRandomWall = (): string => {\n    const randomWall = Math.round(1 + Math.random() * 4);\n    return randomWall >= 4 ? 'wall' : randomWall === 1 ? 'door' : 'none';\n  }\n\n  private getRandomTerrain = (): string => {\n    switch(Math.round(1 + Math.random() * 6)) {\n      case 1:\n        return 'sand';\n      case 2:\n        return 'water';\n      default:\n        return 'none';\n    }\n  }\n}\n","import * as React from 'react';\n\nimport playerStore from '../stores/player';\nimport levelStore from '../stores/levels';\nimport messageStore from '../stores/messages';\n\nconst gameContextDefaultValue = {\n  levelStore,\n  messageStore,\n  playerStore,\n};\nconst gameContext = React.createContext(gameContextDefaultValue);\n\nexport default gameContext;\nexport type GameContext = typeof gameContext;\nexport type GameContextValue = typeof gameContextDefaultValue;\n\nexport abstract class ComponentWithGameContext<P = {}, S = {}, SS = any>\n  extends React.Component<P, S, SS> {\n  static contextType = gameContext;\n  context!: React.ContextType<GameContext>;\n};\n","import { action, observable } from 'mobx';\nimport LevelMap from '../dataObjects/LevelMap';\n\nexport class LevelStore {\n  @observable level1: LevelMap;\n  // @observable playerLocation: [number, number] = [15,15];\n  constructor() {\n    this.level1 = new LevelMap(30);\n  }\n\n  @action markSectionDiscovered = (\n    coords: [number, number]\n  ) => {\n    this.level1.markSectionDiscovered(coords);\n  }\n\n  getSectionDiscovered(coords: [number, number]) {\n    return this.level1.discoveredSections[`${coords[0]}-${coords[1]}`];\n  }\n\n  getSectionByCoords(coords: [number, number]) {\n    return this.level1.levelSections.find(section => coords[0] === section.coords[0] && coords[1] === section.coords[1]);\n  }\n}\n\nconst levelStore = new LevelStore();\n\nexport default levelStore;","import React from 'react';\nimport { observable } from 'mobx';\n\ninterface Message {\n  text: string;\n  type: 'normal' | 'alert';\n}\n\nexport class MessageStore {\n  @observable messages: Message[] = [{text: \"Welcome to MURDUR 0.1!\", type: 'normal'}];\n  public messagePanelScrollRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n  public addMessage = (text: string, type: 'normal' | 'alert' = 'normal') => {\n    this.messages.push({text, type});\n    this.scrollMessagesToBottom();\n  }\n\n  private scrollMessagesToBottom = () => {\n    const messagePanelScrollRefElement = this.messagePanelScrollRef.current;\n    if(messagePanelScrollRefElement) {\n      messagePanelScrollRefElement.scrollTop = messagePanelScrollRefElement.scrollHeight\n    }\n  }\n}\n\nconst messageStore = new MessageStore();\n\nexport default messageStore;","import React from 'react';\nimport { ComponentWithGameContext } from './ComponentWithGameContext';\nimport { observer } from \"mobx-react\"\n\n@observer \nclass CharacterInfoPanel extends ComponentWithGameContext {\n  render() {\n    const {playerStore} = this.context;\n    return <div className=\"character-info-panel\">\n      <div className=\"character-alignment\">\n        {`${playerStore.sex} ${playerStore.race} (${playerStore.alignment}) (${playerStore.level})`}\n      </div>\n      <ul className=\"character-current-info\">\n        <li>\n          <span>Age</span>\n          <span>{playerStore.age}</span>\n        </li>\n        <li>\n          <span>Hits</span>\n          <span>{`${playerStore.currentHits}/${playerStore.maxHits}`}</span>\n        </li>\n        <li>\n          <span>Experience</span>\n          <span>{playerStore.experience}</span>\n        </li>\n        <li>\n          <span>Gold</span>\n          <span>{playerStore.gold}</span>\n        </li>\n      </ul>\n      <ul className=\"character-stats\">\n        <li>\n          <span>Strength</span>\n          <span>{playerStore.stats.strength}</span>\n        </li>\n        <li>\n          <span>Intelligence</span>\n          <span>{playerStore.stats.intelligence}</span>\n        </li>\n        <li>\n          <span>Wisdom</span>\n          <span>{playerStore.stats.wisdom}</span>\n        </li>\n        <li>\n          <span>Constitution</span>\n          <span>{playerStore.stats.constitution}</span>\n        </li>\n        <li>\n          <span>Charisma</span>\n          <span>{playerStore.stats.charisma}</span>\n        </li>\n        <li>\n          <span>Dexterity</span>\n          <span>{playerStore.stats.dexterity}</span>\n        </li>\n      </ul>\n    </div>;\n  }\n}\n\nexport default CharacterInfoPanel;\n\n// age: number = 20;\n//   @observable alignment: string = \"Good\";\n//   @observable race: string = \"Elf\";\n//   @observable sex: string = \"Female\";\n//   @observable level: number = 1;\n//   @observable maxHits: number = 50;\n//   @observable currentHits: number = 50;\n//   @observable experience: number = 1;\n//   @observable gold: number = 0;\n//   @observable stats: Stats = {\n//     strength: 10,\n//     intelligence: 10,\n//     wisdom: 10,\n//     constitution: 10,\n//     charisma: 10,\n//     dexterity: 10,\n//   }","import React from 'react';\nimport CharacterInfoPanel from './CharacterInfoPanel';\n\nconst tabs = [\n  {name: \"Stats\", id: 'stats'},\n  {name: \"Resist\", id: 'resist'},\n  {name: \"Char\", id: 'char'},\n  {name: \"Guild\", id: 'guild'}\n];\n\nexport default class CharacterStats extends React.Component<{}, {activeTab: string}> {\n  constructor(props: {}) {\n      super(props);\n\n      this.state = {\n        activeTab: 'stats'\n      };\n  }\n\n  changeTab = (activeTab: string) => {\n    this.setState({activeTab});\n  }\n\n  render() {\n    const {activeTab} = this.state;\n    return <div className=\"character-stats\">\n      <div className=\"character-name\">Reggie Plop Plops</div>\n      <div className=\"top-tabs\">\n        {tabs.map(tabInfo => \n          <div className={`tab ${activeTab === tabInfo.id ? 'active' : ''}`} \n            onClick={() => {this.changeTab(tabInfo.id)}}>{tabInfo.name}</div>)}\n      </div>\n      {activeTab === 'stats' && <CharacterInfoPanel />}\n    </div>;\n  }\n}\n\n//<div className=\"\"></div>","import React from 'react';\nimport { ComponentWithGameContext } from './ComponentWithGameContext';\nimport { observer } from \"mobx-react\"\n\ninterface MapPanelState {\n  playerLocation: [number, number];\n}\n\n\n@observer \nclass MapPanel extends ComponentWithGameContext<{}, MapPanelState> {\n\n  constructor(props: {}) {\n      super(props);\n\n      this.state = {\n        playerLocation: [15,15],\n      };\n  }\n\n  handleKeyDown = (event: KeyboardEvent) => {\n    let playerLocation: [number, number] = [this.state.playerLocation[0], this.state.playerLocation[1]];\n    switch( event.keyCode ) {\n      case 37: {// go left\n          let boundingSection = this.context.levelStore.getSectionByCoords([this.state.playerLocation[0], this.state.playerLocation[1]]);\n          if (boundingSection && boundingSection.leftWall !== 'wall' && this.state.playerLocation[0] !== 0) {\n            playerLocation = [this.state.playerLocation[0] -1, this.state.playerLocation[1]];\n            this.context.messageStore.addMessage('You walked WEST');\n          }\n          break;\n        }\n      case 38: {// go up\n          const boundingSection = this.context.levelStore.getSectionByCoords([this.state.playerLocation[0], this.state.playerLocation[1]]);\n          if (boundingSection && boundingSection.topWall !== 'wall'  && this.state.playerLocation[1] !== 0) {\n            playerLocation = [this.state.playerLocation[0], this.state.playerLocation[1] - 1];\n            this.context.messageStore.addMessage('You walked NORTH');\n          }\n          break;\n        }\n      case 39: {// go right\n          const boundingSection = this.context.levelStore.getSectionByCoords([this.state.playerLocation[0] + 1, this.state.playerLocation[1]]);\n          if (boundingSection && boundingSection.leftWall !== 'wall') {\n            playerLocation = [this.state.playerLocation[0] + 1, this.state.playerLocation[1]];\n            this.context.messageStore.addMessage('You walked EAST');\n          }\n          break;\n        }\n      case 40: {// go down\n        const boundingSection = this.context.levelStore.getSectionByCoords([this.state.playerLocation[0], this.state.playerLocation[1] + 1]);\n        if (boundingSection && boundingSection.topWall !== 'wall') {\n          playerLocation = [this.state.playerLocation[0], this.state.playerLocation[1] + 1];\n          this.context.messageStore.addMessage('You walked SOUTH');\n        }\n        break;\n      }\n      default: \n        break;\n    }\n    this.context.levelStore.level1.markSectionDiscovered(playerLocation);\n    this.setState({playerLocation});\n  }\n  \n  componentWillMount() {\n    this.context.levelStore.level1.markSectionDiscovered(this.state.playerLocation);\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  render() {\n    const {levelStore} = this.context;\n    console.log(this.state.playerLocation);\n    return <div className=\"explore-map\">\n      <div className=\"map-container\" style={{width: levelStore.level1.size * 14, height: levelStore.level1.size * 14}}>\n        {levelStore.level1.levelSections.map(section => {\n          const isPlayerLocation = section.coords[0] === this.state.playerLocation[0] && section.coords[1] === this.state.playerLocation[1];\n          const isSectionDiscovered = levelStore.getSectionDiscovered(section.coords);\n          const wallClasses = `${isSectionDiscovered.leftWall ? \"wall-left-\"  + section.leftWall : \"\"} ${isSectionDiscovered.topWall ? \"wall-top-\"  + section.topWall : \"\"}`;\n          const sectionClass = isSectionDiscovered.tile ?\n            \"map-square \" + wallClasses + (isPlayerLocation ? \" player-location\" : \"\")  + ' discovered-' + section.terrain:\n            \"map-square \" + wallClasses;\n          return <div key={section.coords[0] + \"-\" + section.coords[1]} className={sectionClass}></div>;\n        })}\n      </div>\n    </div>;\n  }\n}\n\nexport default MapPanel;\n","import React from 'react';\nimport { ComponentWithGameContext } from './ComponentWithGameContext';\nimport { observer } from \"mobx-react\"\n\n@observer \nclass MessagesPanel extends ComponentWithGameContext {\n  render() {\n    const {messageStore} = this.context;\n    return <div className=\"explore-messages\" ref={messageStore.messagePanelScrollRef}>\n      <ul>\n        {messageStore.messages.map(message => \n          <li>{message.text}</li>)}\n      </ul>\n    </div>\n  }\n}\n\nexport default MessagesPanel;\n","import React from 'react';\nimport CharacterStats from '../components/CharacterStats';\nimport MapPanel from '../components/MapPanel';\nimport MessagesPanel from '../components/MessagesPanel';\n\nexport default class ExploreScreen extends React.Component<{}, {}> {\n  constructor(props: {}) {\n      super(props);\n\n      this.state = {\n      };\n  }\n\n  render() {\n    return <div className=\"explore-screen\">\n      <div className=\"character-menu\">\n        <CharacterStats />\n        <div className=\"character-inventory\"></div>\n        <div className=\"party\"></div>\n      </div>\n      <div className=\"explore-pane\">\n        <div className=\"expore-encounter\"></div>\n        <MapPanel />\n        <MessagesPanel />\n      </div>\n    </div>;\n  }\n}\n\n//<div className=\"\"></div>","import React from 'react';\nimport Header from './components/Header';\nimport ExploreScreen from './screens/ExploreScreen';\nimport './main.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <ExploreScreen />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}