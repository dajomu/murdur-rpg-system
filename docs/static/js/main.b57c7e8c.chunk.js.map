{"version":3,"sources":["stores/audio.ts","dataObjects/LevelMap.ts","stores/levels.ts","stores/messages.ts","stores/player.ts","components/ComponentWithGameContext.tsx","components/AudioPlayer.tsx","components/Header.tsx","components/CharacterInfoPanel.tsx","components/CharacterStats.tsx","controllers/exploreController.ts","components/MapPanel.tsx","components/MessagesPanel.tsx","screens/ExploreScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["audioStore","playerAudioRef","React","createRef","toggleAudioOn","soundEnabled","type","audio","this","player","current","paused","src","play","observable","LevelMap","size","randomise","levelSections","discoveredSections","markSectionDiscovered","coords","tile","modifier","leftWall","topWall","isSectionDiscovered","randomlyPopulateMap","ycord","xcord","push","getRandomWall","terrain","getRandomTerrain","randomWall","Math","round","random","levelStore","level1","find","section","action","messageStore","messagePanelScrollRef","addMessage","text","messages","scrollMessagesToBottom","messagePanelScrollRefElement","scrollTop","scrollHeight","clockwiseRotationMap","counterClockwiseRotationMap","playerStore","setPlayerLocation","playerLocation","rotatePlayerClockwise","playerDirection","rotatePlayerCounterClockwise","strength","intelligence","wisdom","constitution","charisma","dexterity","gameContextDefaultValue","gameContext","ComponentWithGameContext","context","contextType","AudioPlayer","observer","className","onClick","alt","ref","Header","CharacterInfoPanel","sex","race","alignment","level","key","age","currentHits","maxHits","experience","gold","stats","tabs","name","id","CharacterStats","props","changeTab","activeTab","setState","state","map","tabInfo","Component","keyDirection","37","38","39","40","boundingOffsetMap","west","north","east","south","movementOffsetMap","exploreController","handleKeyDown","event","direction","keyCode","moveDirection","toUpperCase","playAudio","checkMoveWallCollision","movementOffset","boundingOffset","boundingSection","getSectionByCoords","window","addEventListener","removeEventListener","MapPanel","setupKeyboardListeners","removeKeyboardListeners","style","width","height","isPlayerLocation","getSectionDiscovered","wallClasses","sectionClass","MessagesPanel","message","index","ExploreScreen","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b57c7e8c.chunk.js","sourcesContent":["import React from 'react';\nimport { observable } from 'mobx';\n\ninterface AudioTrack {\n  src: string;\n}\n\nexport class AudioStore {\n  @observable soundEnabled: boolean = false;\n  @observable player: {[key: string]: AudioTrack} = {\n    'hitwall': {src: '/murdur-rpg-system/audio/ouch.mp3'},\n  };\n  public playerAudioRef: React.RefObject<HTMLAudioElement> = React.createRef();\n\n  playAudio(type: string, audio: string) {\n    if(type === 'player' && this.player[audio] && this.playerAudioRef.current && this.soundEnabled && this.playerAudioRef.current.paused){\n      this.playerAudioRef.current.src = this.player[audio].src;\n      this.playerAudioRef.current.play();\n    }\n  }\n\n  toggleAudioOn = () => {\n    this.soundEnabled = !this.soundEnabled;\n  }\n}\n\nconst audioStore = new AudioStore();\n\nexport default audioStore;","// import { observable } from 'mobx';\n\ninterface SectionData {\n  coords: [number, number],\n  leftWall: string;\n  topWall: string;\n  terrain: string;\n  modifier?: string;\n}\n\ninterface DiscoveredSection {\n  leftWall: boolean;\n  topWall: boolean;\n  tile: boolean,\n  modifier: boolean\n}\n\nexport default class LevelMap {\n  levelSections: SectionData[] = [];//Map<[number, number], SectionData> = new Map();\n  size: number;\n  discoveredSections: { [key: string]: DiscoveredSection } = {};\n\n  constructor(size = 10, randomise = true) {\n    this.size = size;\n    if (randomise) { this.randomlyPopulateMap() }\n  }\n\n  public markSectionDiscovered = (coords: [number, number]) => {\n    this.discoveredSections[`${coords[0]}-${coords[1]}`] = { tile: true, modifier: true, leftWall: true, topWall: true };\n    if(this.discoveredSections[`${coords[0] + 1}-${coords[1]}`]) {\n      this.discoveredSections[`${coords[0] + 1}-${coords[1]}`].leftWall = true;\n    }\n    if(this.discoveredSections[`${coords[0]}-${coords[1] + 1}`]) {\n      this.discoveredSections[`${coords[0]}-${coords[1] + 1}`].topWall = true;\n    }\n  }\n\n  public isSectionDiscovered = (coords: [number, number]) => {\n    return this.discoveredSections[`${coords[0]}-${coords[1]}`] ? this.discoveredSections[`${coords[0]}-${coords[1]}`].tile : false;\n  }\n\n  private randomlyPopulateMap = () => {\n    for(var ycord = 0; ycord < this.size; ycord++) {\n      for(var xcord = 0; xcord < this.size; xcord++) {\n        this.levelSections.push({coords: [xcord, ycord], leftWall: this.getRandomWall(), topWall: this.getRandomWall(), terrain: this.getRandomTerrain()});\n        this.discoveredSections[`${xcord}-${ycord}`] = { tile: false, modifier: false, leftWall: false, topWall: false };\n      }\n    }\n  }\n\n  private getRandomWall = (): string => {\n    const randomWall = Math.round(1 + Math.random() * 4);\n    return randomWall >= 4 ? 'wall' : randomWall === 1 ? 'door' : 'none';\n  }\n\n  private getRandomTerrain = (): string => {\n    switch(Math.round(1 + Math.random() * 6)) {\n      case 1:\n        return 'sand';\n      case 2:\n        return 'water';\n      default:\n        return 'none';\n    }\n  }\n}\n","import { action, observable } from 'mobx';\nimport LevelMap from '../dataObjects/LevelMap';\n\nexport class LevelStore {\n  @observable level1: LevelMap;\n  constructor() {\n    this.level1 = new LevelMap(30);\n  }\n\n  @action markSectionDiscovered = (\n    coords: [number, number]\n  ) => {\n    this.level1.markSectionDiscovered(coords);\n  }\n\n  getSectionDiscovered(coords: [number, number]) {\n    return this.level1.discoveredSections[`${coords[0]}-${coords[1]}`];\n  }\n\n  getSectionByCoords(coords: [number, number]) {\n    return this.level1.levelSections.find(section => coords[0] === section.coords[0] && coords[1] === section.coords[1]);\n  }\n}\n\nconst levelStore = new LevelStore();\n\nexport default levelStore;","import React from 'react';\nimport { observable } from 'mobx';\n\ninterface Message {\n  text: string;\n  type: 'normal' | 'alert';\n}\n\nexport class MessageStore {\n  @observable messages: Message[] = [{text: \"Welcome to MURDUR 0.1!\", type: 'normal'}];\n  public messagePanelScrollRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n  public addMessage = (text: string, type: 'normal' | 'alert' = 'normal') => {\n    this.messages.push({text, type});\n    this.scrollMessagesToBottom();\n  }\n\n  private scrollMessagesToBottom = () => {\n    const messagePanelScrollRefElement = this.messagePanelScrollRef.current;\n    if(messagePanelScrollRefElement) {\n      messagePanelScrollRefElement.scrollTop = messagePanelScrollRefElement.scrollHeight\n    }\n  }\n}\n\nconst messageStore = new MessageStore();\n\nexport default messageStore;","import { observable } from 'mobx';\n\ninterface Stats {\n  strength: number;\n  intelligence: number;\n  wisdom: number;\n  constitution: number;\n  charisma: number;\n  dexterity: number;\n}\n\nexport type Direction = 'west' | 'north' | 'east' | 'south';\n\nconst clockwiseRotationMap: {[key: string]: Direction} = {\n  'west': 'north',\n  'north': 'east',\n  'east': 'south',\n  'south': 'west'\n}\n\nconst counterClockwiseRotationMap: {[key: string]: Direction} = {\n  'west': 'south',\n  'north': 'west',\n  'east': 'north',\n  'south': 'east'\n}\n\nexport class PlayerStore {\n  @observable age: number = 20;\n  @observable alignment: string = \"Good\";\n  @observable race: string = \"Elf\";\n  @observable sex: string = \"Female\";\n  @observable level: number = 1;\n  @observable maxHits: number = 50;\n  @observable currentHits: number = 50;\n  @observable experience: number = 1;\n  @observable gold: number = 0;\n  @observable stats: Stats = {\n    strength: 10,\n    intelligence: 10,\n    wisdom: 10,\n    constitution: 10,\n    charisma: 10,\n    dexterity: 10,\n  }\n  @observable playerLocation: [number, number] = [15,15];\n  @observable playerDirection: Direction = 'north';\n\n  public setPlayerLocation = (playerLocation: [number, number]) => {\n    this.playerLocation = playerLocation;\n  }\n\n  public rotatePlayerClockwise = () => {\n    this.playerDirection = clockwiseRotationMap[this.playerDirection];\n  }\n\n  public rotatePlayerCounterClockwise = () => {\n    this.playerDirection = counterClockwiseRotationMap[this.playerDirection];\n  }\n}\n\nconst playerStore = new PlayerStore();\n\nexport default playerStore;","import * as React from 'react';\n\nimport audioStore from '../stores/audio';\nimport levelStore from '../stores/levels';\nimport messageStore from '../stores/messages';\nimport playerStore from '../stores/player';\n\nconst gameContextDefaultValue = {\n  audioStore,\n  levelStore,\n  messageStore,\n  playerStore,\n};\nconst gameContext = React.createContext(gameContextDefaultValue);\n\nexport default gameContext;\nexport type GameContext = typeof gameContext;\nexport type GameContextValue = typeof gameContextDefaultValue;\n\nexport abstract class ComponentWithGameContext<P = {}, S = {}, SS = any>\n  extends React.Component<P, S, SS> {\n  static contextType = gameContext;\n  context!: React.ContextType<GameContext>;\n};\n","import React from 'react';\nimport { ComponentWithGameContext } from './ComponentWithGameContext';\nimport { observer } from \"mobx-react\"\n\n@observer \nclass AudioPlayer extends ComponentWithGameContext {\n  render() {\n    const {audioStore} = this.context;\n    return <>\n      <div className=\"toggle-audio-button\" onClick={audioStore.toggleAudioOn}>\n        {audioStore.soundEnabled ? \n          <img src=\"/murdur-rpg-system/images/audioOn.png\" alt=\"switch audio on/off\"/> :\n          <img src=\"/murdur-rpg-system/images/audioOff.png\" alt=\"switch audio on/off\"/>}\n      </div>\n      <audio ref={audioStore.playerAudioRef} />\n    </>;\n  }\n}\n\nexport default AudioPlayer;","import React from 'react';\n\nconst Header = () => <div></div>\n\nexport default Header;","import React from 'react';\nimport { ComponentWithGameContext } from './ComponentWithGameContext';\nimport { observer } from \"mobx-react\"\n\n@observer \nclass CharacterInfoPanel extends ComponentWithGameContext {\n  render() {\n    const {playerStore} = this.context;\n    return <div className=\"character-info-panel\">\n      <div className=\"character-alignment\">\n        {`${playerStore.sex} ${playerStore.race} (${playerStore.alignment}) (${playerStore.level})`}\n      </div>\n      <ul className=\"character-current-info\">\n        <li key=\"age\">\n          <span>Age</span>\n          <span>{playerStore.age}</span>\n        </li>\n        <li key=\"hits\">\n          <span>Hits</span>\n          <span>{`${playerStore.currentHits}/${playerStore.maxHits}`}</span>\n        </li>\n        <li key=\"xp\">\n          <span>Experience</span>\n          <span>{playerStore.experience}</span>\n        </li>\n        <li key=\"gold\">\n          <span>Gold</span>\n          <span>{playerStore.gold}</span>\n        </li>\n      </ul>\n      <ul className=\"character-stats\">\n        <li key=\"strength\">\n          <span>Strength</span>\n          <span>{playerStore.stats.strength}</span>\n        </li>\n        <li key=\"intelligence\">\n          <span>Intelligence</span>\n          <span>{playerStore.stats.intelligence}</span>\n        </li>\n        <li key=\"wisdom\">\n          <span>Wisdom</span>\n          <span>{playerStore.stats.wisdom}</span>\n        </li>\n        <li key=\"constitution\">\n          <span>Constitution</span>\n          <span>{playerStore.stats.constitution}</span>\n        </li>\n        <li key=\"charisma\">\n          <span>Charisma</span>\n          <span>{playerStore.stats.charisma}</span>\n        </li>\n        <li key=\"dexterity\">\n          <span>Dexterity</span>\n          <span>{playerStore.stats.dexterity}</span>\n        </li>\n      </ul>\n    </div>;\n  }\n}\n\nexport default CharacterInfoPanel;\n","import React from 'react';\nimport CharacterInfoPanel from './CharacterInfoPanel';\n\nconst tabs = [\n  {name: \"Stats\", id: 'stats'},\n  {name: \"Resist\", id: 'resist'},\n  {name: \"Char\", id: 'char'},\n  {name: \"Guild\", id: 'guild'}\n];\n\nexport default class CharacterStats extends React.Component<{}, {activeTab: string}> {\n  constructor(props: {}) {\n      super(props);\n\n      this.state = {\n        activeTab: 'stats'\n      };\n  }\n\n  changeTab = (activeTab: string) => {\n    this.setState({activeTab});\n  }\n\n  render() {\n    const {activeTab} = this.state;\n    return <div className=\"character-stats\">\n      <div className=\"character-name\">Reggie Plop Plops</div>\n      <div className=\"top-tabs\">\n        {tabs.map(tabInfo => \n          <div className={`tab ${activeTab === tabInfo.id ? 'active' : ''}`} \n            onClick={() => {this.changeTab(tabInfo.id)}}>{tabInfo.name}</div>)}\n      </div>\n      {activeTab === 'stats' && <CharacterInfoPanel />}\n    </div>;\n  }\n}\n\n//<div className=\"\"></div>","import audioStore from '../stores/audio';\nimport playerStore, { Direction } from '../stores/player';\nimport levelStore from '../stores/levels';\nimport messageStore from '../stores/messages';\n\nconst keyDirection: {[key: number]: string} = {\n  37: 'counter-clockwise',\n  38: 'forward',\n  39: 'clockwise',\n  40: 'backward'\n}\n\nconst boundingOffsetMap: {[key: string]: [number, number]} = {\n  west: [0,0],\n  north: [0,0],\n  east: [1,0],\n  south: [0,1]\n}\n\nconst movementOffsetMap: {[key: string]: [number, number]} = {\n  west: [-1,0],\n  north: [0,-1],\n  east: [1,0],\n  south: [0,1]\n}\n\nexport class ExploreController {\n  handleKeyDown = (event: KeyboardEvent) => {\n    const direction = keyDirection[event.keyCode];\n    switch(direction) {\n      case 'counter-clockwise':\n        playerStore.rotatePlayerCounterClockwise();\n        break;\n      case 'clockwise':\n        playerStore.rotatePlayerClockwise();\n        break;\n      case 'forward':\n      // case 'backward':\n        if(this.moveDirection(playerStore.playerDirection)) {\n          messageStore.addMessage(`You walked ${direction.toUpperCase()}`);\n        } else {\n          audioStore.playAudio('player', 'hitwall');\n        };\n        break;\n      default: \n        break;\n    }\n  }\n\n  moveDirection(direction: Direction) {\n    if (this.checkMoveWallCollision(direction)) {\n      const movementOffset = movementOffsetMap[direction];\n      const playerLocation: [number, number] = [playerStore.playerLocation[0] + movementOffset[0], playerStore.playerLocation[1] + movementOffset[1]];\n      levelStore.level1.markSectionDiscovered(playerLocation);\n      playerStore.setPlayerLocation(playerLocation);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  checkMoveWallCollision(direction: Direction) {\n    const boundingOffset = boundingOffsetMap[direction];\n    const boundingSection = levelStore.getSectionByCoords([playerStore.playerLocation[0] + boundingOffset[0], playerStore.playerLocation[1] + boundingOffset[1]]);\n    if(direction === 'north' || direction === 'south') {\n      return boundingSection && boundingSection.topWall !== 'wall' && playerStore.playerLocation[1] + boundingOffset[1] >= 1;\n    } else {\n      return boundingSection && boundingSection.leftWall !== 'wall' && playerStore.playerLocation[0] + boundingOffset[0] >= 1;\n    }\n    \n  }\n  \n\n  setupKeyboardListeners() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  removeKeyboardListeners() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n}\n\nconst exploreController = new ExploreController();\n\nexport default exploreController;","import React from 'react';\nimport { ComponentWithGameContext } from './ComponentWithGameContext';\nimport { observer } from \"mobx-react\"\n\nimport exploreController from '../controllers/exploreController';\n\ninterface MapPanelState {\n  playerLocation: [number, number];\n}\n\n@observer \nclass MapPanel extends ComponentWithGameContext<{}, MapPanelState> {  \n  componentWillMount() {\n    this.context.levelStore.level1.markSectionDiscovered(this.context.playerStore.playerLocation);\n  }\n\n  componentDidMount() {\n    exploreController.setupKeyboardListeners();\n  }\n\n  componentWillUnmount() {\n    exploreController.removeKeyboardListeners();\n  }\n\n  render() {\n    const {levelStore, playerStore} = this.context;\n    const {playerLocation, playerDirection} = playerStore;\n    return <div className=\"explore-map\">\n      <div className=\"map-container\" style={{width: levelStore.level1.size * 14, height: levelStore.level1.size * 14}}>\n        {levelStore.level1.levelSections.map(section => {\n          const isPlayerLocation = section.coords[0] === playerLocation[0] && section.coords[1] === playerLocation[1];\n          const isSectionDiscovered = levelStore.getSectionDiscovered(section.coords);\n          const wallClasses = `${isSectionDiscovered.leftWall ? \"wall-left-\"  + section.leftWall : \"\"} ${isSectionDiscovered.topWall ? \"wall-top-\"  + section.topWall : \"\"}`;\n          const sectionClass = isSectionDiscovered.tile ?\n            \"map-square \" + wallClasses + ' discovered-' + section.terrain:\n            \"map-square \" + wallClasses;\n          return <div key={section.coords[0] + \"-\" + section.coords[1]} className={sectionClass}>\n            {isPlayerLocation ? <img src=\"/murdur-rpg-system/images/arrowUp-pink.png\" alt=\"player\" className={\"player-sprite \" + playerDirection} /> : null}\n          </div>;\n        })}\n      </div>\n    </div>;\n  }\n}\n\nexport default MapPanel;\n","import React from 'react';\nimport { ComponentWithGameContext } from './ComponentWithGameContext';\nimport { observer } from \"mobx-react\"\n\n@observer \nclass MessagesPanel extends ComponentWithGameContext {\n  render() {\n    const {messageStore} = this.context;\n    return <div className=\"explore-messages\" ref={messageStore.messagePanelScrollRef}>\n      <ul>\n        {messageStore.messages.map((message, index) => \n          <li key={\"message-\" + index}>{message.text}</li>)}\n      </ul>\n    </div>\n  }\n}\n\nexport default MessagesPanel;\n","import React from 'react';\nimport CharacterStats from '../components/CharacterStats';\nimport MapPanel from '../components/MapPanel';\nimport MessagesPanel from '../components/MessagesPanel';\n\nexport default class ExploreScreen extends React.Component<{}, {}> {\n  constructor(props: {}) {\n      super(props);\n\n      this.state = {\n      };\n  }\n\n  render() {\n    return <div className=\"explore-screen\">\n      <div className=\"character-menu\">\n        <CharacterStats />\n        <div className=\"character-inventory\"></div>\n        <div className=\"party\"></div>\n      </div>\n      <div className=\"explore-pane\">\n        <div className=\"expore-encounter\"></div>\n        <MapPanel />\n        <MessagesPanel />\n      </div>\n    </div>;\n  }\n}\n\n//<div className=\"\"></div>","import React from 'react';\nimport AudioPlayer from './components/AudioPlayer';\nimport Header from './components/Header';\nimport ExploreScreen from './screens/ExploreScreen';\nimport './main.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <ExploreScreen />\n      <AudioPlayer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}