{"version":3,"sources":["components/Header.tsx","stores/player.ts","dataObjects/LevelMap.ts","components/ComponentWithGameContext.tsx","stores/levels.ts","components/CharacterInfoPanel.tsx","components/CharacterStats.tsx","components/MapPanel.tsx","screens/ExploreScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","playerStore","observable","LevelMap","size","randomise","levelSections","randomlyPopulateMap","xcord","ycord","push","coords","walls","getRandomWalls","terrain","getRandomTerrain","leftRand","Math","round","random","rightRand","this","gameContextDefaultValue","levelStore","level1","gameContext","React","ComponentWithGameContext","context","contextType","CharacterInfoPanel","observer","age","tabs","name","id","CharacterStats","props","changeTab","activeTab","setState","state","className","map","tabInfo","onClick","Component","MapPanel","console","log","style","width","height","section","ExploreScreen","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f227bb56.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => <div></div>\n\nexport default Header;","import { observable } from 'mobx';\n\nexport class PlayerStore {\n  @observable age: number = 20;\n  @observable alignment: string = \"Good\";\n  @observable race: string = \"Elf\";\n  @observable sex: string = \"Female\";\n}\n\nconst playerStore = new PlayerStore();\n\nexport default playerStore;","// import { observable } from 'mobx';\n\ninterface SectionData {\n  coords: [number, number],\n  walls: string,// sections are encoded with top and left walls\n  terrain: string;\n  modifier?: string;\n}\n\nexport default class LevelMap {\n  levelSections: SectionData[] = [];//Map<[number, number], SectionData> = new Map();\n  size: number;\n\n  constructor(size = 10, randomise = true) {\n    this.size = size;\n    if (randomise) { this.randomlyPopulateMap() }\n    // this.levelSections.forEach((value, key) => {console.log(value, key)})\n  }\n\n  private randomlyPopulateMap = () => {\n    for(var xcord = 0; xcord < this.size; xcord++) {\n      for(var ycord = 0; ycord < this.size; ycord++) {\n        this.levelSections.push({coords: [xcord, ycord], walls: this.getRandomWalls(), terrain: this.getRandomTerrain()})\n      }\n    }\n  }\n\n  private getRandomWalls = (): string => {\n    const leftRand = Math.round(1 + Math.random() * 2);\n    const rightRand = Math.round(1 + Math.random() * 2);\n    return `${leftRand === 1 ? 'wall' : leftRand === 2 ? 'door' : 'none'}-${rightRand === 1 ? 'wall' : rightRand === 2 ? 'door' : 'none'}`\n  }\n\n  private getRandomTerrain = (): string => {\n    switch(Math.round(1 + Math.random() * 4)) {\n      case 1:\n        return 'sand';\n      case 2:\n        return 'water';\n      default:\n        return 'none';\n    }\n  }\n}\n","import * as React from 'react';\n\nimport playerStore from '../stores/player';\nimport levelStore from '../stores/levels';\n\nconst gameContextDefaultValue = {\n  levelStore,\n  playerStore,\n};\nconst gameContext = React.createContext(gameContextDefaultValue);\n\nexport default gameContext;\nexport type GameContext = typeof gameContext;\nexport type GameContextValue = typeof gameContextDefaultValue;\n\nexport abstract class ComponentWithGameContext<P = {}, S = {}, SS = any>\n  extends React.Component<P, S, SS> {\n  static contextType = gameContext;\n  context!: React.ContextType<GameContext>;\n};\n","import { observable } from 'mobx';\nimport LevelMap from '../dataObjects/LevelMap';\n\nexport class LevelStore {\n  @observable level1: LevelMap;\n  constructor() {\n    this.level1 = new LevelMap(30);\n  }\n}\n\nconst levelStore = new LevelStore();\n\nexport default levelStore;","import React from 'react';\nimport { ComponentWithGameContext } from './ComponentWithGameContext';\nimport { observer } from \"mobx-react\"\n\n@observer \nclass CharacterInfoPanel extends ComponentWithGameContext {\n  render() {\n    const {playerStore} = this.context;\n    return <div>{playerStore.age}</div>\n  }\n}\n\nexport default CharacterInfoPanel;\n","import React from 'react';\nimport CharacterInfoPanel from './CharacterInfoPanel';\n\nconst tabs = [\n  {name: \"Stats\", id: 'stats'},\n  {name: \"Resist\", id: 'resist'},\n  {name: \"Char\", id: 'char'},\n  {name: \"Guild\", id: 'guild'}\n];\n\nexport default class CharacterStats extends React.Component<{}, {activeTab: string}> {\n  constructor(props: {}) {\n      super(props);\n\n      this.state = {\n        activeTab: 'stats'\n      };\n  }\n\n  changeTab = (activeTab: string) => {\n    this.setState({activeTab});\n  }\n\n  render() {\n    const {activeTab} = this.state;\n    return <div className=\"character-stats\">\n      <div className=\"character-name\">Reggie Plop Plops</div>\n      <div className=\"top-tabs\">\n        {tabs.map(tabInfo => \n          <div className={`tab ${activeTab === tabInfo.id ? 'active' : ''}`} \n            onClick={() => {this.changeTab(tabInfo.id)}}>{tabInfo.name}</div>)}\n      </div>\n      {activeTab === 'stats' && <CharacterInfoPanel />}\n    </div>;\n  }\n}\n\n//<div className=\"\"></div>","import React from 'react';\nimport { ComponentWithGameContext } from './ComponentWithGameContext';\nimport { observer } from \"mobx-react\"\n\n@observer \nclass MapPanel extends ComponentWithGameContext {\n  render() {\n    const {levelStore} = this.context;\n    console.log(levelStore.level1.levelSections);\n    return <div className=\"explore-map\">\n      <div className=\"map-container\" style={{width: levelStore.level1.size * 14, height: levelStore.level1.size * 14}}>\n        {levelStore.level1.levelSections.map(section => {\n          return <div className={\"map-square \" + section.walls}></div>;\n        })}\n      </div>\n    </div>;\n  }\n}\n\nexport default MapPanel;\n","import React from 'react';\nimport CharacterStats from '../components/CharacterStats';\nimport MapPanel from '../components/MapPanel';\n\nexport default class ExploreScreen extends React.Component<{}, {}> {\n  constructor(props: {}) {\n      super(props);\n\n      this.state = {\n      };\n  }\n\n  render() {\n    return <div className=\"explore-screen\">\n      <div className=\"character-menu\">\n        <CharacterStats />\n        <div className=\"character-inventory\"></div>\n        <div className=\"party\"></div>\n      </div>\n      <div className=\"explore-pane\">\n        <div className=\"expore-encounter\"></div>\n        <MapPanel />\n        <div className=\"explore-messages\"></div>\n      </div>\n    </div>;\n  }\n}\n\n//<div className=\"\"></div>","import React from 'react';\nimport Header from './components/Header';\nimport ExploreScreen from './screens/ExploreScreen';\nimport './main.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <ExploreScreen />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}